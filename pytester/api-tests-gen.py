import json
import os
import re
import sys



utCodeGenBase = """
import re
import requests
import unittest
class TestFoo(unittest.TestCase):
    def setUp(self):
        self.PH={"content-type":"application/json"}

    def tearDown(self):
        pass
"""

if __name__ == "__main__":

    infname = "myapis-swagger.json"

    if len(sys.argv) == 2:
        infname = sys.argv[1]
        projName = os.getcwd().split("/")[-2]
    elif len(sys.argv) == 3:
        infname = sys.argv[1]
        projName = sys.argv[2]

    outfname = "test_%s_apis_autogenerated.py"%(projName)

    print(projName)
    print(os.path.abspath(__file__),os.getcwd().split("/"))

    dicSwagger = {}
    with open(infname,"r") as inf:
        dicSwagger = json.load(inf)

    print(dicSwagger.get("host"))
    targetUriEndpoint = "http://"+ dicSwagger.get("host")
    uriDict =  dicSwagger.get('paths',{})
    regex_pattern = re.compile("\/(\{\w+\})+")
    for i1,(k,v) in enumerate(uriDict.items()):
        print(i1, k, v.keys())
        uri = k
        for i2, method in enumerate(v.keys()):
            uriPath = uri
            # sample uriPath is /gatekeeper/v1/edgeapps/nodes/{node_id}/apps/{app_id}
            sr = regex_pattern.findall(uriPath)
            uriPathVars=""
            uriPath2 = "" 
            if sr:
                # sample sr is [u'{node_id}', u'{app_id}']
                for idx, s in enumerate(sr):
                    uriPathVars+= "%s='v%d',"%(s[1:-1],idx) 
                uriPathVars = uriPathVars[:-1]
            uriFunctionNameable = uri.replace("/","_").replace("{","_").replace("}","_")
            if uriPathVars == "": # no path variables
                uriPathFull =  "http://"+ dicSwagger.get("host") + uriPath
                oneTestCase = """
    def test{i1}{i2}_{method}{uri}(self):
        # case {m1} {uriPath}
        resp = requests.{method}('{targetUri}')
        print(resp.content)
        self.assertEqual(resp.status_code, 200)
        dicRet = resp.json()
        self.assertEqual(dicRet["err_code"],0)
""".format(i1=i1,i2=i2,m1=method.upper(),method=method,uri=uriFunctionNameable,uriPath=uriPath,targetUri=uriPathFull)
            else:
                uriPathPrefix =  "http://"+ dicSwagger.get("host") + uriPath2
                # indent of generated code is important!!
                oneTestCase = """
    def test{i1}{i2}_{method}{uri}(self):
        # case {m1} {uriPath}
        targetUri = '{uriPathPrefix}{uriPath}'.format({uriPathVars}) 
        resp = requests.{method}(targetUri)
        print(resp.content)
        self.assertEqual(resp.status_code, 200)
        dicRet = resp.json()
        self.assertEqual(dicRet["err_code"],0)
""".format(i1=i1,i2=i2,m1=method.upper(),method=method,uri=uriFunctionNameable,uriPath=uriPath,uriPathPrefix=uriPathPrefix,uriPathVars=uriPathVars)

            #print(oneTestCase)
            utCodeGenBase += oneTestCase 

    open(outfname,"w").write(utCodeGenBase)

